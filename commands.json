{
    "$schema": "https://cdn.subsquid.io/schemas/commands.json",
    "commands": {
      "clean": {
        "description": "delete all build artifacts",
        "cmd": ["npx", "--yes", "rimraf", "lib"]
      },
      "build": {
        "description": "Build the squid project",
        "deps": ["clean"],
        "cmd": ["tsc"]
      },
      "up": {
        "description": "Start a PG database",
        "cmd": ["docker-compose", "up", "-d"]
      },
      "down": {
        "description": "Drop a PG database",
        "cmd": ["docker-compose", "down"]
      },
      "migration:apply": {
        "description": "Apply the DB migrations",
        "cmd": ["squid-typeorm-migration", "apply"]
      },
      "migration:generate": {
        "description": "Generate a DB migration matching the TypeORM entities",
        "deps": ["build", "migration:clean"],
        "cmd": ["squid-typeorm-migration", "generate"]
      },
      "migration:clean": {
        "description": "Clean the migrations folder",
        "cmd": ["npx", "--yes", "rimraf", "./db/migrations"]
      },
      "migration": {
        "deps": ["build"],
        "cmd": ["squid-typeorm-migration", "generate"],
        "hidden": true
      },
      "codegen": {
        "description": "Generate TypeORM entities from the schema file",
        "cmd": ["squid-typeorm-codegen"]
      },
      "typegen": {
        "description": "Generate data access classes for an ABI file(s) in the ./abi folder",
        "cmd": ["squid-evm-typegen", "./src/abi", {"glob": "./abi/*.json"}, "--multicall"]
      },
      "process:ownership_chain": {
        "description": "Load .env and start the squid processor",
        "deps": ["build", "migration:apply"],
        "cmd": ["node", "--require=dotenv/config", "lib/ownership_chain/main.js"]
      },
      "process:prod:ownership_chain": {
        "description": "Start the squid processor",
        "deps": ["migration:apply"],
        "cmd": ["node", "lib/ownership_chain/main.js"],
        "hidden": true
      },
      "process:laos": {
        "description": "Load .env and start the squid processor",
        "deps": ["build", "migration:apply"],
        "cmd": ["node", "--require=dotenv/config", "lib/laos/main.js"]
      },
      "process:prod:laos": {
        "description": "Start the squid processor",
        "deps": ["migration:apply"],
        "cmd": ["node", "lib/laos/main.js"],
        "hidden": true
      },
      "process:cron": {
        "description": "Start the tokenUriProcessor",
        "cmd": ["node", "lib/laos/tokenUriProcessor.js"],
        "hidden": true
      },
      "serve": {
        "description": "Start the GraphQL API server",
        "cmd": ["squid-graphql-server"]
      },
      "serve:prod": {
        "description": "Start the GraphQL API server with caching and limits",
        "cmd": ["squid-graphql-server",
          "--dumb-cache", "in-memory",
          "--dumb-cache-ttl", "1000",
          "--dumb-cache-size", "100",
          "--dumb-cache-max-age", "1000" ]
      },
      "check-updates": {
        "cmd": ["npx", "--yes", "npm-check-updates", "--filter=/subsquid/", "--upgrade"],
        "hidden": true
      },
      "bump": {
        "description": "Bump @subsquid packages to the latest versions",
        "deps": ["check-updates"],
        "cmd": ["npm", "i", "-f"]
      },
      "open": {
        "description": "Open a local browser window",
        "cmd": ["npx", "--yes", "opener"]
      },
      "copy-graphql:generation": {
        "description": "Copy the schema_for_generation GraphQL to schema.graphql",
        "cmd": ["node", "copySchemas.js", "generation"]
      },
      "copy-graphql:public": {
        "description": "Copy the schema_for_public_queries GraphQL to schema.graphql",
        "cmd": ["node", "copySchemas.js", "public"]
      },
      "clean:all": {
        "description": "Restart",
        "deps": ["down", "clean", "copy-graphql:generation", "migration:clean", "up", "codegen","migration:generate", "migration:apply"],
        "cmd": ["node", "copySchemas.js", "public"]
      }
    }
  }
